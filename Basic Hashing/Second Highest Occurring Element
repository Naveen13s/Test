//Second Highest Occurring Element
/*Given an array of n integers, find the second most frequent element in it. If there are multiple elements that appear a maximum number of times, find the smallest of them. If second most frequent element does not exist return -1.
Examples:
Input: arr = [1, 2, 2, 3, 3, 3]
Output: 2
Explanation: The number 2 appears the second most (2 times) and number 3 appears the most(3 times). 

Input: arr = [4, 4, 5, 5, 6, 7]
Output: 6
Explanation: Both 6 and 7 appear second most times, but 6 is smaller.

Input: arr = [10, 9 ,7, 7]
Output: 9
Constraints:
1 <= n <= 105
1 <= arr[i] <= 104   */

#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    int secondMostFrequentElement(std::vector<int>& nums) {
        int n = nums.size();
        if (n < 2) return -1; // If there are less than 2 elements
        
        int maxi = *std::max_element(nums.begin(), nums.end());
        int hash[maxi + 1] = {0};
        
        for (int i = 0; i < n; i++) {
            hash[nums[i]]++; // Count frequency of each element
        }
        
        int el1 = -1, el2 = -1, count1 = 0, count2 = 0;
        
        for (int i = 0; i <= maxi; i++) {
            if (hash[i] > count1) {
                el2 = el1; // Update second most frequent
                count2 = count1;
                el1 = i; // Update most frequent
                count1 = hash[i];
            } else if (hash[i] > count2 && hash[i] < count1) {
                el2 = i; // Update second most frequent
                count2 = hash[i];
            }
        }
        
        return (el2 == -1) ? -1 : el2; // If no second most frequent element
    }
};
